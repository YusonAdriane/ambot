package view;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.TableRowSorter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Alex
 */
public class Organizer extends javax.swing.JFrame {

    private static final String filepath = "src\\view\\Yuson.json";
    private static final String Filepath = "src\\view\\Event.json";
    private static final String PublishFilePath = "src\\view\\Publish.json";
    private static final String NotificationFilePath = "src\\view\\Notif.json"; // Path for Notif.json
    private DefaultTableModel notificationTableModel;
    private Timer fileWatcherTimer;
    private long lastModifiedTime;
    private TableRowSorter<DefaultTableModel> rowSorter;
    private TableRowSorter<DefaultTableModel> rowSorterTeamList;
    private TableRowSorter<DefaultTableModel> rowSorterRequest;
    private final String usname;

    /**
     * Creates new form Organizer
     */
    public Organizer(String usname) {
        initComponents();
        
        this.usname = usname;
        // Initialize the TableRowSorter for Published JTable
        DefaultTableModel model = (DefaultTableModel) Published.getModel();
        rowSorter = new TableRowSorter<>(model);
        Published.setRowSorter(rowSorter);

        DefaultTableModel modelTeamList = (DefaultTableModel) TeamList.getModel();
        rowSorterTeamList = new TableRowSorter<>(modelTeamList);
        TeamList.setRowSorter(rowSorterTeamList);

        DefaultTableModel modelRequest = (DefaultTableModel) Request.getModel();
        rowSorterRequest = new TableRowSorter<>(modelRequest);
        Request.setRowSorter(rowSorterRequest);

        loadTeamListData();
        loadRequestData(); // Load Request JTable
        loadPublishedData(); // Load Published JTable
        loadRequestData(); // Load Request JTable
        startFileWatcher(); // Start watching Event.json for changes
        WelcomeMessage.setText(usname + "!");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        Home = new javax.swing.JButton();
        Booking = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        Panel = new javax.swing.JPanel();
        Windows1 = new javax.swing.JPanel();
        Purple = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        WelcomeMessage = new javax.swing.JLabel();
        TablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Published = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Search1 = new javax.swing.JTextField();
        Team = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TeamList = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        Search2 = new javax.swing.JTextField();
        Add = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        Remove = new javax.swing.JButton();
        Sort = new javax.swing.JComboBox<>();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        jLabel4 = new javax.swing.JLabel();
        Bookings = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Request = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        Search3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        CHost = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        CEvent = new javax.swing.JTextField();
        CDate = new javax.swing.JTextField();
        CVenue = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        CFrom = new javax.swing.JComboBox<>();
        CTo = new javax.swing.JComboBox<>();
        Change = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Approved = new javax.swing.JButton();
        Disapproved = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        kGradientPanel1.setkEndColor(new java.awt.Color(0, 0, 0));
        kGradientPanel1.setkGradientFocus(200);
        kGradientPanel1.setkStartColor(new java.awt.Color(51, 153, 255));

        Home.setBackground(new java.awt.Color(255, 222, 89));
        Home.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Home.setText("Home");
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });

        Booking.setBackground(new java.awt.Color(255, 222, 89));
        Booking.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Booking.setText("Booking");
        Booking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookingActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Logout(4).png"))); // NOI18N
        jLabel1.setText("Logout");
        jLabel1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 222, 89));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Team List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("_____________________");

        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("_____________________");

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Home, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                        .addComponent(Booking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel19))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addComponent(Booking, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addGap(9, 9, 9)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 192, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        kGradientPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Booking, Home});

        getContentPane().add(kGradientPanel1, java.awt.BorderLayout.LINE_START);

        Panel.setLayout(new java.awt.CardLayout());

        Purple.setBackground(new java.awt.Color(255, 255, 255));
        Purple.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setText("WELCOME,");
        Purple.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, -1, -1));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Welcome.gif"))); // NOI18N
        Purple.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 330, 180));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/Logo_L.png"))); // NOI18N
        Purple.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 40));

        WelcomeMessage.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        WelcomeMessage.setText("Organizer");
        Purple.add(WelcomeMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 50, 210, 40));

        TablePanel.setBackground(new java.awt.Color(255, 255, 255));

        Published.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Host", "Event", "Venue", "Date", "From", "To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Published);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("On Going Events");

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/search.png"))); // NOI18N

        Search1.setText("Search");
        Search1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Search1MouseClicked(evt);
            }
        });
        Search1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Search1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout TablePanelLayout = new javax.swing.GroupLayout(TablePanel);
        TablePanel.setLayout(TablePanelLayout);
        TablePanelLayout.setHorizontalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addGroup(TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TablePanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(TablePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        TablePanelLayout.setVerticalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addGroup(TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TablePanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TablePanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Search1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout Windows1Layout = new javax.swing.GroupLayout(Windows1);
        Windows1.setLayout(Windows1Layout);
        Windows1Layout.setHorizontalGroup(
            Windows1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Windows1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Windows1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Purple, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE))
                .addContainerGap())
        );
        Windows1Layout.setVerticalGroup(
            Windows1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Windows1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Purple, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Panel.add(Windows1, "card2");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        TeamList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Password", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TeamList);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/search.png"))); // NOI18N

        Search2.setText("Search");
        Search2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Search2MouseClicked(evt);
            }
        });
        Search2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search2ActionPerformed(evt);
            }
        });
        Search2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Search2KeyReleased(evt);
            }
        });

        Add.setBackground(new java.awt.Color(0, 204, 255));
        Add.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Add.setForeground(new java.awt.Color(255, 255, 255));
        Add.setText(" Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/plus3.gif"))); // NOI18N

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel20.setText("Edit Field Group");

        Remove.setBackground(new java.awt.Color(255, 102, 102));
        Remove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Remove.setForeground(new java.awt.Color(255, 255, 255));
        Remove.setText("Remove");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        Sort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "User", "Organizer" }));
        Sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortActionPerformed(evt);
            }
        });

        kGradientPanel2.setkEndColor(new java.awt.Color(0, 0, 0));
        kGradientPanel2.setkGradientFocus(1000);
        kGradientPanel2.setkStartColor(new java.awt.Color(51, 153, 255));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("TEAM LIST");

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kGradientPanel2Layout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(kGradientPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(Sort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Add)
                                .addGap(41, 41, 41)
                                .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Search2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Add, Remove});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Search2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(kGradientPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(Sort, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Add, Remove});

        javax.swing.GroupLayout TeamLayout = new javax.swing.GroupLayout(Team);
        Team.setLayout(TeamLayout);
        TeamLayout.setHorizontalGroup(
            TeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeamLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        TeamLayout.setVerticalGroup(
            TeamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeamLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        Panel.add(Team, "card3");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        Request.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Host", "Event", "Venue", "Date", "From", "To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(Request);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("Book Request");

        Search3.setText("Search");
        Search3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Search3MouseClicked(evt);
            }
        });
        Search3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Search3KeyReleased(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/search.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Search3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(11, 11, 11))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel11.setText("Host :");

        jLabel12.setText("Event :");

        jLabel13.setText("Venue :");

        jLabel14.setText("Date :");

        CEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CEventActionPerformed(evt);
            }
        });

        CDate.setText("MM/DD/YYYY");

        CVenue.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- --", "Auditorium", "L205", "Computer Laboratory 1", "Computer Laboratory 2", "Computer Laboratory 3", "Computer Laboratory 4" }));

        jLabel15.setText("Time : ");

        CFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- From --", "7:00 AM", "7:30 AM", "8:00 AM", "8:30 AM", "9:00 AM", "9:30 AM", "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM", "12:00 PM", "12:30 PM", "1:00 PM", "1:30 PM", "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM", "4:30 PM", "5:00 PM", "5:30 PM", "6:00 PM", "6:30 PM", "7:00 PM" }));

        CTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- To --", "7:00 AM", "7:30 AM", "8:00 AM", "8:30 AM", "9:00 AM", "9:30 AM", "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM", "12:00 PM", "12:30 PM", "1:00 PM", "1:30 PM", "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM", "4:30 PM", "5:00 PM", "5:30 PM", "6:00 PM", "6:30 PM", "7:00 PM" }));

        Change.setBackground(new java.awt.Color(0, 204, 255));
        Change.setForeground(new java.awt.Color(255, 255, 255));
        Change.setText("Change");
        Change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setText("Edit Information");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CHost, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                            .addComponent(CEvent))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CDate))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(CFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CTo, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Change, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CVenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CEvent, CHost, CVenue});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CFrom, CTo});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(CHost, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(CDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(CEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(CVenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Change))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CDate, CEvent, CHost, CVenue, Change});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CFrom, CTo});

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        Approved.setBackground(new java.awt.Color(102, 255, 102));
        Approved.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Approved.setText("Approved");
        Approved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApprovedActionPerformed(evt);
            }
        });

        Disapproved.setBackground(new java.awt.Color(255, 102, 102));
        Disapproved.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Disapproved.setText("Disapproved");
        Disapproved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisapprovedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Disapproved, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Approved, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Approved, Disapproved});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(Approved)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Disapproved, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Approved, Disapproved});

        javax.swing.GroupLayout BookingsLayout = new javax.swing.GroupLayout(Bookings);
        Bookings.setLayout(BookingsLayout);
        BookingsLayout.setHorizontalGroup(
            BookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(BookingsLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        BookingsLayout.setVerticalGroup(
            BookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BookingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        Panel.add(Bookings, "card4");

        getContentPane().add(Panel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        Panel.removeAll();
        Panel.add(Windows1);
        Panel.repaint();
        Panel.revalidate();
    }//GEN-LAST:event_HomeActionPerformed

    private void jLabel1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel1AncestorAdded
    }//GEN-LAST:event_jLabel1AncestorAdded

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        this.dispose();
        Login log = new Login("");
        log.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void BookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookingActionPerformed
        Panel.removeAll();
        Panel.add(Bookings);
        Panel.repaint();
        Panel.revalidate();
    }//GEN-LAST:event_BookingActionPerformed

    private void CEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CEventActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CEventActionPerformed

    private void DisapprovedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisapprovedActionPerformed
        // Get the selected row index
    int selectedRow = Request.getSelectedRow(); // Get the selected row index
    if (selectedRow == -1) { // Check if a row is selected
        JOptionPane.showMessageDialog(this, "Please select a row to disapprove.", "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }

    DefaultTableModel requestTableModel = (DefaultTableModel) Request.getModel();

    // Retrieve selected row data
    String host = (String) requestTableModel.getValueAt(selectedRow, 0);
    String eventName = (String) requestTableModel.getValueAt(selectedRow, 1);
    String venue = (String) requestTableModel.getValueAt(selectedRow, 2);
    String date = (String) requestTableModel.getValueAt(selectedRow, 3);
    String from = (String) requestTableModel.getValueAt(selectedRow, 4);
    String to = (String) requestTableModel.getValueAt(selectedRow, 5);

    // Remove the selected row from the Request JTable
    requestTableModel.removeRow(selectedRow);

    // Add the data to the Notif.json file
    addToNotifJson(host, eventName, venue, date, from, to, "Disapproved");

    // Refresh the Notification JTable if needed
    // You can implement a method to reload the notifications from the Notif.json file
    }//GEN-LAST:event_DisapprovedActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadTeamListData();

    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        saveTeamListData();
    }//GEN-LAST:event_formWindowClosed

    private void ApprovedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApprovedActionPerformed
        int selectedRow = Request.getSelectedRow(); // Get the selected row index
        if (selectedRow == -1) { // Check if a row is selected
            JOptionPane.showMessageDialog(this, "Please select a row to approve.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        DefaultTableModel requestTableModel = (DefaultTableModel) Request.getModel();

        // Retrieve selected row data
        String host = (String) requestTableModel.getValueAt(selectedRow, 0);
        String eventName = (String) requestTableModel.getValueAt(selectedRow, 1);
        String venue = (String) requestTableModel.getValueAt(selectedRow, 2);
        String date = (String) requestTableModel.getValueAt(selectedRow, 3);
        String from = (String) requestTableModel.getValueAt(selectedRow, 4);
        String to = (String) requestTableModel.getValueAt(selectedRow, 5);

        // Remove the selected row from the Request JTable
        requestTableModel.removeRow(selectedRow);

        // Update the Event.json file
        removeFromJsonFile(host, eventName, Filepath);

        // Add the selected row to the Publish.json file
        addToPublishJson(host, eventName, venue, date, from, to);

        // Refresh the Publish JTable in both Organizer and User classes
        loadPublishedData(); // Refresh Organizer's JTable
        User.loadPublishedDataStatic(); // Refresh User's JTable

    }//GEN-LAST:event_ApprovedActionPerformed

    private void Search1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Search1KeyReleased
        String searchText = Search1.getText();

        if (searchText.trim().length() == 0) {
            // If search field is empty, show all rows
            rowSorter.setRowFilter(null);
        } else {
            // Apply a case-insensitive filter
            rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }    }//GEN-LAST:event_Search1KeyReleased

    private void Search2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Search2KeyReleased
        String searchText = Search2.getText();

        if (searchText.trim().length() == 0) {
            // If the search field is empty, show all rows in TeamList JTable
            rowSorterTeamList.setRowFilter(null);
        } else {
            // Apply a case-insensitive filter to the TeamList JTable
            rowSorterTeamList.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }
     }//GEN-LAST:event_Search2KeyReleased

    private void Search3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Search3KeyReleased
        String searchText = Search3.getText();

        if (searchText.trim().length() == 0) {
            // If the search field is empty, show all rows in Request JTable
            rowSorterRequest.setRowFilter(null);
        } else {
            // Apply a case-insensitive filter to the Request JTable
            rowSorterRequest.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }
    }//GEN-LAST:event_Search3KeyReleased

    private void SortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortActionPerformed
        String selectedRole = (String) Sort.getSelectedItem(); // Get selected item from combo box

        if ("All".equals(selectedRole)) {
            // Show all rows in the TeamList JTable
            rowSorterTeamList.setRowFilter(null);
        } else {
            // Filter the TeamList JTable based on the selected role (User or Organizer)
            rowSorterTeamList.setRowFilter(RowFilter.regexFilter("^" + selectedRole + "$", 2)); // Assuming role is in the 3rd column (index 2)
        }
    }//GEN-LAST:event_SortActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // Get the selected row in the TeamList JTable
        int selectedRow = TeamList.getSelectedRow();

        if (selectedRow == -1) {
            // No row is selected; show a warning message
            JOptionPane.showMessageDialog(this, "Please select a row first.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get the current role of the selected user
        DefaultTableModel tableModel = (DefaultTableModel) TeamList.getModel();
        String currentRole = (String) tableModel.getValueAt(selectedRow, 2); // Assuming Role is in the 3rd column (index 2)

        if ("Organizer".equalsIgnoreCase(currentRole)) {
            // The selected user is already an Organizer
            JOptionPane.showMessageDialog(this, "This person is already an Organizer.", "Notice", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Ask for confirmation to change the role to Organizer
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to add this user as an Organizer?",
                    "Confirm Action",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (confirm == JOptionPane.YES_OPTION) {
                // Change the role to Organizer
                tableModel.setValueAt("Organizer", selectedRow, 2);

                // Save the updated data back to the JSON file
                saveTeamListData();

                // Show a success message
                JOptionPane.showMessageDialog(this, "User role has been changed to Organizer.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_AddActionPerformed

    private void Search1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Search1MouseClicked
        Search1.setText("");
    }//GEN-LAST:event_Search1MouseClicked

    private void Search2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Search2MouseClicked
        Search2.setText("");
    }//GEN-LAST:event_Search2MouseClicked

    private void Search3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Search3MouseClicked
        Search3.setText("");
    }//GEN-LAST:event_Search3MouseClicked

    private void Search2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Search2ActionPerformed

    private void ChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeActionPerformed
        // Get the selected row
        int selectedRow = Request.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row first.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get new values from the fields
        String newHost = CHost.getText().trim();
        String newEvent = CEvent.getText().trim();
        String newDate = CDate.getText().trim();
        String newVenue = (String) CVenue.getSelectedItem();
        String newFrom = (String) CFrom.getSelectedItem();
        String newTo = (String) CTo.getSelectedItem();

        // Validate inputs
        if (newHost.isEmpty() || newEvent.isEmpty() || newDate.isEmpty()
                || newVenue.equals("-- --") || newFrom.equals("-- From --") || newTo.equals("-- To --")) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields correctly.", "Invalid Input", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Update JTable
        DefaultTableModel tableModel = (DefaultTableModel) Request.getModel();
        tableModel.setValueAt(newHost, selectedRow, 0);
        tableModel.setValueAt(newEvent, selectedRow, 1);
        tableModel.setValueAt(newVenue, selectedRow, 2);
        tableModel.setValueAt(newDate, selectedRow, 3);
        tableModel.setValueAt(newFrom, selectedRow, 4);
        tableModel.setValueAt(newTo, selectedRow, 5);

        // Save to JSON
        saveRequestData();

        // Success message
        JOptionPane.showMessageDialog(this, "Request updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_ChangeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Panel.removeAll();
        Panel.add(Team);
        Panel.repaint();
        Panel.revalidate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        // Get the selected row in the TeamList JTable
        int selectedRow = TeamList.getSelectedRow();

        if (selectedRow == -1) {
            // No row is selected; show a warning message
            JOptionPane.showMessageDialog(this, "Please select a row first.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get the current role of the selected user
        DefaultTableModel tableModel = (DefaultTableModel) TeamList.getModel();
        String currentRole = (String) tableModel.getValueAt(selectedRow, 2); // Assuming Role is in the 3rd column (index 2)

        if ("User".equalsIgnoreCase(currentRole)) {
            // The selected user is already a User
            JOptionPane.showMessageDialog(this, "This person is already a User.", "Notice", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Ask for confirmation to change the role back to User
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to remove this user as an Organizer and set them back as a User?",
                    "Confirm Action",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (confirm == JOptionPane.YES_OPTION) {
                // Change the role back to User
                tableModel.setValueAt("User", selectedRow, 2);

                // Save the updated data back to the JSON file
                saveTeamListData();

                // Show a success message
                JOptionPane.showMessageDialog(this, "Organizer role has been removed. User is now set to 'User'.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_RemoveActionPerformed

    private void addToNotifJson(String host, String eventName, String venue, String date, String from, String to, String status) {
    JSONParser parser = new JSONParser();

    try (FileReader reader = new FileReader(NotificationFilePath)) {
        JSONObject rootObject = (JSONObject) parser.parse(reader);
        JSONArray notificationArray = (JSONArray) rootObject.get("Notification");

        // Create a new notification object
        JSONObject newNotification = new JSONObject();
        newNotification.put("Host", host);
        newNotification.put("Event", eventName);
        newNotification.put("Venue", venue);
        newNotification.put("Date", date);
        newNotification.put("From", from);
        newNotification.put("To", to);
        newNotification.put("Status", status);

        // Add the new notification to the notification array
        notificationArray.add(newNotification);

        // Write the updated JSON back to the file
        try (FileWriter writer = new FileWriter(NotificationFilePath)) {
            writer.write(rootObject.toJSONString());
            writer.flush();
        }
    } catch (IOException | ParseException e) {
        JOptionPane.showMessageDialog(this, "Error updating Notif.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void saveRequestData() {
        DefaultTableModel tableModel = (DefaultTableModel) Request.getModel();
        JSONArray requestArray = new JSONArray();

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            JSONObject request = new JSONObject();
            request.put("Host", tableModel.getValueAt(i, 0));
            request.put("Event", tableModel.getValueAt(i, 1));
            request.put("Venue", tableModel.getValueAt(i, 2));
            request.put("Date", tableModel.getValueAt(i, 3));
            request.put("From", tableModel.getValueAt(i, 4));
            request.put("To", tableModel.getValueAt(i, 5));
            requestArray.add(request);
        }

        try (FileWriter writer = new FileWriter(Filepath)) {
            writer.write(requestArray.toJSONString());
            writer.flush();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeFromJsonFile(String host, String eventName, String jsonFilePath) {
        JSONParser parser = new JSONParser();

        try (FileReader reader = new FileReader(jsonFilePath)) {
            JSONArray eventArray = (JSONArray) parser.parse(reader);

            // Find and remove the matching object
            eventArray.removeIf(obj -> {
                JSONObject event = (JSONObject) obj;
                return host.equals(event.get("Host")) && eventName.equals(event.get("Event"));
            });

            // Write the updated JSON array back to the file
            try (FileWriter writer = new FileWriter(jsonFilePath)) {
                writer.write(eventArray.toJSONString());
                writer.flush();
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error updating JSON file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addToPublishJson(String host, String eventName, String venue, String date, String from, String to) {
        JSONParser parser = new JSONParser();

        try (FileReader reader = new FileReader(PublishFilePath)) {
            JSONObject rootObject = (JSONObject) parser.parse(reader);
            JSONArray publishArray = (JSONArray) rootObject.get("publish");

            // Create a new event object
            JSONObject newEvent = new JSONObject();
            newEvent.put("Host", host);
            newEvent.put("Event", eventName);
            newEvent.put("Venue", venue);
            newEvent.put("Date", date);
            newEvent.put("From", from);
            newEvent.put("To", to);

            // Add the new event to the publish array
            publishArray.add(newEvent);

            // Write the updated JSON back to the file
            try (FileWriter writer = new FileWriter(PublishFilePath)) {
                writer.write(rootObject.toJSONString());
                writer.flush();
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error updating Publish.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadTeamListData() {
        DefaultTableModel tableModel = (DefaultTableModel) TeamList.getModel();
        tableModel.setRowCount(0); // Clear any existing rows

        JSONParser parser = new JSONParser();

        try (FileReader reader = new FileReader(filepath)) {
            // Parse the JSON file
            JSONObject rootObject = (JSONObject) parser.parse(reader);
            JSONArray usersArray = (JSONArray) rootObject.get("users");

            // Populate the JTable
            for (Object obj : usersArray) {
                JSONObject user = (JSONObject) obj;
                String username = (String) user.get("username");
                String password = (String) user.get("password");
                String type = (String) user.get("type");

                tableModel.addRow(new Object[]{username, password, type});
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Start a file watcher to monitor changes in the Event.json file.
     */
    private void startFileWatcher() {
        File eventFile = new File(Filepath);
        lastModifiedTime = eventFile.lastModified();

        fileWatcherTimer = new Timer(true); // Daemon thread
        fileWatcherTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (eventFile.lastModified() > lastModifiedTime) {
                    lastModifiedTime = eventFile.lastModified();
                    SwingUtilities.invokeLater(() -> loadRequestData()); // Reload data on the Event Dispatch Thread
                }
            }
        }, 0, 2000); // Check every 2 seconds
    }

    /**
     * Stop the file watcher when the application is closed.
     */
    @Override
    public void dispose() {
        if (fileWatcherTimer != null) {
            fileWatcherTimer.cancel();
        }
        super.dispose();
    }

    /**
     * Load data from the Event.json file into the Request JTable.
     */
    private void loadRequestData() {
        DefaultTableModel tableModel = (DefaultTableModel) Request.getModel();
        tableModel.setRowCount(0); // Clear any existing rows

        JSONParser parser = new JSONParser();

        try (FileReader reader = new FileReader(Filepath)) {
            // Parse the JSON file
            JSONArray eventArray = (JSONArray) parser.parse(reader);

            // Populate the JTable
            for (Object obj : eventArray) {
                JSONObject event = (JSONObject) obj;
                String host = (String) event.get("Host");
                String eventName = (String) event.get("Event");
                String venue = (String) event.get("Venue");
                String date = (String) event.get("Date");
                String from = (String) event.get("From");
                String to = (String) event.get("To");

                tableModel.addRow(new Object[]{host, eventName, venue, date, from, to});
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading data from Event.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadPublishedData() {
        DefaultTableModel tableModel = (DefaultTableModel) Published.getModel();
        tableModel.setRowCount(0); // Clear any existing rows

        JSONParser parser = new JSONParser();

        try (FileReader reader = new FileReader(PublishFilePath)) {
            // Parse the JSON file
            JSONObject rootObject = (JSONObject) parser.parse(reader);
            JSONArray publishArray = (JSONArray) rootObject.get("publish");

            // Populate the JTable with data from the JSON file
            for (Object obj : publishArray) {
                JSONObject event = (JSONObject) obj;
                String host = (String) event.get("Host");
                String eventName = (String) event.get("Event");
                String venue = (String) event.get("Venue");
                String date = (String) event.get("Date");
                String from = (String) event.get("From");
                String to = (String) event.get("To");

                tableModel.addRow(new Object[]{host, eventName, venue, date, from, to});
            }
        } catch (IOException | ParseException e) {
            JOptionPane.showMessageDialog(this, "Error loading data from Publish.json: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Save the data from the JTable back into the JSON file.
     */
    private void saveTeamListData() {
        DefaultTableModel tableModel = (DefaultTableModel) TeamList.getModel();
        JSONArray usersArray = new JSONArray();

        // Extract data from the JTable and construct the JSON array
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            JSONObject user = new JSONObject();
            user.put("username", tableModel.getValueAt(i, 0));
            user.put("password", tableModel.getValueAt(i, 1));
            user.put("type", tableModel.getValueAt(i, 2));
            usersArray.add(user);
        }

        // Write the JSON array back to the file
        JSONObject rootObject = new JSONObject();
        rootObject.put("users", usersArray);

        try (FileWriter writer = new FileWriter(filepath)) {
            writer.write(rootObject.toJSONString());
            writer.flush();
            JOptionPane.showMessageDialog(this, "Data saved successfully!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new Organizer("test").setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Approved;
    private javax.swing.JButton Booking;
    private javax.swing.JPanel Bookings;
    private javax.swing.JTextField CDate;
    private javax.swing.JTextField CEvent;
    private javax.swing.JComboBox<String> CFrom;
    private javax.swing.JTextField CHost;
    private javax.swing.JComboBox<String> CTo;
    private javax.swing.JComboBox<String> CVenue;
    private javax.swing.JButton Change;
    private javax.swing.JButton Disapproved;
    private javax.swing.JButton Home;
    private javax.swing.JPanel Panel;
    private javax.swing.JTable Published;
    private javax.swing.JPanel Purple;
    private javax.swing.JButton Remove;
    private javax.swing.JTable Request;
    private javax.swing.JTextField Search1;
    private javax.swing.JTextField Search2;
    private javax.swing.JTextField Search3;
    private javax.swing.JComboBox<String> Sort;
    private javax.swing.JPanel TablePanel;
    private javax.swing.JPanel Team;
    private javax.swing.JTable TeamList;
    private javax.swing.JLabel WelcomeMessage;
    private javax.swing.JPanel Windows1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private keeptoo.KGradientPanel kGradientPanel1;
    private keeptoo.KGradientPanel kGradientPanel2;
    // End of variables declaration//GEN-END:variables
}
